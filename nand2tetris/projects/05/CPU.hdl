// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /*Regs */
    
    /*load a with num if loadAInstA true
      else loadAInstC load aluOut */

    Not(in=instruction[15], out=loadAInstA);
    Xor(a=loadAInstA, b=loadAInstC, out=loadA);
    
    /*registers*/
    ARegister(in=inA,load=loadA, out=outA);
    DRegister(in=aluOut, load=loadRegD, out=outD);

    /*A inst */
    Mux16(a[0..14]=instruction[0..14], b=aluOut, 
	    sel=instruction[15], out=inA);

    /* C inst
	ALU inst */
    
    Mux16(a=outA, b=inM, sel=instruction[12], out=mOrA);
	
	/*alu input*/
    ALU(x=outD, y=mOrA, 

	/*alu calc*/
	zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	f=instruction[7],
	no=instruction[6],

	/*alu out */
	out=aluOut, out=outM, /* outM output */
	zr=zr,
	ng=ng);
    
    /*dest inst*/

    /*load the registers or not 
     load only if c instruction */
    And(a=instruction[5], b=instruction[15], out=loadAInstC);
    And(a=instruction[4], b=instruction[15], out=loadRegD);
    And(a=instruction[3], b=instruction[15], out=writeM); /* writeM output */

    And16(a=outA, b=true, out[0..14]=addressM); /* I think that does it*/


    /*JMP inst*/

    /*greater than*/
    Or(a=zr, b=ng, out=OrJmp);
    Not(in=OrJmp, out=gt);
    And(a=instruction[0], b=gt, out=outGt);
    
    /*equal to*/
    And(a=instruction[1], b=zr, out=outZr);

    /*less than*/
    And(a=instruction[2], b=ng, out=outNg);
    
    /*if any of those are true, then maybe jump*/
    Or8Way(in[0]=outZr, in[1]=outNg, in[2]=outGt, out=maybeJmp);

    /* jump only if c instruction */
    And(a=maybeJmp, b=instruction[15], out=jmp);
    Not(in=jmp, out=notJmp);

    PC(in=outA, load=jmp, inc=notJmp,
	reset=reset, out[0..14]=pc);/*pc output*/
}
